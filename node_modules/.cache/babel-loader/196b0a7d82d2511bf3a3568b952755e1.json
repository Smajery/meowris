{"ast":null,"code":"var _jsxFileName = \"/Users/alexander/Desktop/myStudy/client/src/components/LoginPage/LoginForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useActions } from \"../../hooks/useActions\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ROUTE_MEMORY } from \"../../utils/consts\";\nimport { useSelector } from \"react-redux\";\nimport { login } from \"../../http/userAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginForm = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    regMessage,\n    logMessage,\n    isError\n  } = useSelector(state => state.authReducer);\n  const {\n    singIn,\n    logIn,\n    setIsError,\n    setLogMessage,\n    setRegMessage\n  } = useActions();\n  const [emailValue, setEmailValue] = useState('');\n  const [passwordValue, setPasswordValue] = useState('');\n  const [isEmailEmpty, setIsEmailEmpty] = useState(false);\n  const [isPasswordEmpty, setIsPasswordEmpty] = useState(false);\n  const [haveAccount, setHaveAccount] = useState(true);\n  const handleSubmitForm = async e => {\n    if (!emailValue) {\n      setIsEmailEmpty(true);\n    } else {\n      setIsEmailEmpty(false);\n    }\n    if (!passwordValue) {\n      setIsPasswordEmpty(true);\n    } else {\n      setIsPasswordEmpty(false);\n    }\n    e.preventDefault();\n    setIsError(false);\n    setRegMessage('');\n    setLogMessage('');\n    if (haveAccount) {\n      logIn(emailValue, passwordValue);\n      login(emailValue, passwordValue).then(() => navigate(ROUTE_MEMORY));\n    } else {\n      singIn(emailValue, passwordValue);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmitForm,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        multiple: true,\n        type: \"email\",\n        autoComplete: \"on\",\n        value: emailValue,\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0456\\u0442\\u044C \\u0441\\u0432\\u0456\\u0439 email\",\n        onChange: e => setEmailValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"isEmpty-text\",\n        children: isEmailEmpty && \"Це поле обов'язкове\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        autoComplete: \"on\",\n        value: passwordValue,\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0456\\u0442\\u044C \\u0441\\u0432\\u0456\\u0439 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n        onChange: e => setPasswordValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"isEmpty-text\",\n        children: isPasswordEmpty && \"Це поле обов'язкове\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-box\",\n        children: [haveAccount ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn-box__text\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u041D\\u0435\\u043C\\u0430\\u0454 \\u043E\\u0431\\u043B\\u0456\\u043A\\u043E\\u0432\\u043E\\u0433\\u043E \\u0437\\u0430\\u043F\\u0438\\u0441\\u0443?\", /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => setHaveAccount(false),\n              children: \"\\u0417\\u0430\\u0440\\u0435\\u0454\\u0441\\u0442\\u0440\\u0443\\u0439\\u0442\\u0435\\u0441\\u044C!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn-box__text\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u0423 \\u0432\\u0430\\u0441 \\u0432\\u0436\\u0435 \\u0454 \\u043E\\u0431\\u043B\\u0456\\u043A\\u043E\\u0432\\u0438\\u0439 \\u0437\\u0430\\u043F\\u0438\\u0441?\", /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => setHaveAccount(true),\n              children: \"\\u0423\\u0432\\u0456\\u0439\\u0434\\u0456\\u0442\\u044C!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), haveAccount ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"\\u0423\\u0432\\u0456\\u0439\\u0442\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"\\u0417\\u0430\\u0440\\u0435\\u0454\\u0441\\u0442\\u0440\\u0443\\u0432\\u0430\\u0442\\u0438\\u0441\\u044F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: isError && logMessage ? 'message-card' : 'message-card closed',\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-close\",\n        onClick: () => setIsError(false),\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-card__text\",\n        children: logMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: isError && regMessage ? 'message-card' : 'message-card closed',\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-close\",\n        onClick: () => setIsError(false),\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-card__text\",\n        children: regMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(LoginForm, \"8RgAyqAyDjfHKEgpLSsRqKr3xwg=\", false, function () {\n  return [useNavigate, useSelector, useActions];\n});\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useState","useActions","useNavigate","ROUTE_MEMORY","useSelector","login","LoginForm","navigate","regMessage","logMessage","isError","state","authReducer","singIn","logIn","setIsError","setLogMessage","setRegMessage","emailValue","setEmailValue","passwordValue","setPasswordValue","isEmailEmpty","setIsEmailEmpty","isPasswordEmpty","setIsPasswordEmpty","haveAccount","setHaveAccount","handleSubmitForm","e","preventDefault","then","target","value"],"sources":["/Users/alexander/Desktop/myStudy/client/src/components/LoginPage/LoginForm.jsx"],"sourcesContent":["import React, {useState} from 'react';\nimport {useActions} from \"../../hooks/useActions\";\nimport {useNavigate} from \"react-router-dom\";\nimport {ROUTE_MEMORY} from \"../../utils/consts\";\nimport {useSelector} from \"react-redux\";\nimport {login} from \"../../http/userAPI\";\n\nconst LoginForm = () => {\n    const navigate = useNavigate()\n    const {regMessage, logMessage, isError} = useSelector(state => state.authReducer)\n    const {singIn, logIn, setIsError, setLogMessage, setRegMessage} = useActions()\n\n    const [emailValue, setEmailValue] = useState('')\n    const [passwordValue, setPasswordValue] = useState('')\n    const [isEmailEmpty, setIsEmailEmpty] = useState(false)\n    const [isPasswordEmpty, setIsPasswordEmpty] = useState(false)\n    const [haveAccount, setHaveAccount] = useState(true)\n\n    const handleSubmitForm = async (e) => {\n        if (!emailValue) {\n            setIsEmailEmpty(true)\n        } else {\n            setIsEmailEmpty(false)\n        }\n        if (!passwordValue) {\n            setIsPasswordEmpty(true)\n        } else {\n            setIsPasswordEmpty(false)\n        }\n        e.preventDefault()\n        setIsError(false)\n        setRegMessage('')\n        setLogMessage('')\n        if (haveAccount) {\n            logIn(emailValue, passwordValue)\n            login(emailValue, passwordValue).then(() => navigate(ROUTE_MEMORY))\n        } else {\n            singIn(emailValue, passwordValue)\n        }\n    }\n\n    return (\n        <div className='login-form'>\n            <form onSubmit={handleSubmitForm}>\n                <input\n                    multiple\n                    type='email'\n                    autoComplete='on'\n                    value={emailValue}\n                    placeholder='Введіть свій email'\n                    onChange={e => setEmailValue(e.target.value)}\n                />\n                <p className='isEmpty-text'>{isEmailEmpty && \"Це поле обов'язкове\"}</p>\n                <input\n                    type='password'\n                    autoComplete='on'\n                    value={passwordValue}\n                    placeholder='Введіть свій пароль'\n                    onChange={e => setPasswordValue(e.target.value)}\n                />\n                <p className='isEmpty-text'>{isPasswordEmpty && \"Це поле обов'язкове\"}</p>\n                <div className='btn-box'>\n                    {haveAccount\n                        ?\n                        <div className='btn-box__text'>\n                            <p>Немає облікового запису?\n                                <span onClick={() => setHaveAccount(false)}>\n                                    Зареєструйтесь!\n                                </span>\n                            </p>\n                        </div>\n                        :\n                        <div className='btn-box__text'>\n                            <p>У вас вже є обліковий запис?\n                                <span onClick={() => setHaveAccount(true)}>\n                                    Увійдіть!\n                                </span>\n                            </p>\n                        </div>\n                    }\n                    {haveAccount\n                        ?\n                        <button type='submit'>Увійти</button>\n                        :\n                        <button type='submit'>Зареєструватися</button>\n                    }\n                </div>\n            </form>\n            <div className={(isError && logMessage) ? 'message-card' : 'message-card closed'}>\n                <button\n                    className='btn-close'\n                    onClick={() => setIsError(false)}\n                >\n                    x\n                </button>\n                <p className='message-card__text'>\n                    {logMessage}\n                </p>\n            </div>\n            <div className={(isError && regMessage) ? 'message-card' : 'message-card closed'}>\n                <button\n                    className='btn-close'\n                    onClick={() => setIsError(false)}\n                >\n                    x\n                </button>\n                <p className='message-card__text'>\n                    {regMessage}\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default LoginForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  categories: [],\n  selectedCategory: {},\n  memories: [],\n  selectedMemories: [],\n  selectedMemory: {},\n  options: [{\n    name: 'За назвою',\n    value: 'name'\n  }, {\n    name: 'За спаданням',\n    value: 'ratingDown'\n  }, {\n    name: 'За зростанням',\n    value: 'ratingUp'\n  }],\n  selectedSort: '',\n  isLoading: false,\n  isCategoryNameModal: false,\n  isMemoryCardModal: false,\n  currentPage: 1,\n  totalCountMemories: 0\n};\nexport const memorySlice = createSlice({\n  name: 'memory',\n  initialState,\n  reducers: {\n    setCategories(state, action) {\n      state.categories = action.payload;\n    },\n    addCategory(state, action) {\n      state.categories = [...state.categories, action.payload];\n    },\n    removeCategory(state, action) {\n      state.categories = state.categories.filter(category => category.id !== action.payload);\n      state.selectedCategory = {};\n    },\n    setMemories(state, action) {\n      state.memories = action.payload;\n    },\n    setSelectedMemories(state, action) {\n      state.selectedMemories = action.payload;\n    },\n    addMemory(state, action) {\n      state.selectedMemories = [...state.selectedMemories, action.payload];\n    },\n    setSelectedMemory(state, action) {\n      state.selectedMemory = action.payload;\n    },\n    setIsLoading(state, action) {\n      state.isLoading = action.payload;\n    },\n    setSelectedCategory(state, action) {\n      state.selectedCategory = action.payload;\n    },\n    setSelectedCategoryName(state, action) {\n      state.selectedCategory.name = action.payload;\n    },\n    setCategoryName(state, action) {\n      for (let i = 0; i < state.categories.length; i++) {\n        if (state.categories[i].id === state.selectedCategory.id) {\n          state.categories[i].title = action.payload;\n        }\n      }\n    },\n    setSelectedMemoryName(state, action) {\n      state.selectedMemory.title = action.payload;\n      for (let i = 0; i < state.categories.length; i++) {\n        if (state.categories[i].id === state.selectedMemory.id) {\n          state.categories[i].title = action.payload;\n        }\n      }\n    },\n    setSelectedMemoryDescription(state, action) {\n      state.selectedMemories.description = action.payload;\n      for (let i = 0; i < state.categories.length; i++) {\n        if (state.categories[i].id === state.selectedMemory.id) {\n          state.categories[i].description = action.payload;\n        }\n      }\n    },\n    setSelectedMemoryRating(state, action) {\n      state.selectedMemory.rating = action.payload;\n      for (let i = 0; i < state.categories.length; i++) {\n        if (state.categories[i].id === state.selectedMemory.id) {\n          state.categories[i].rating = action.payload;\n        }\n      }\n    },\n    setSelectedMemoryImg(state, action) {\n      state.selectedMemory.img = action.payload;\n      for (let i = 0; i < state.categories.length; i++) {\n        if (state.categories[i].id === state.selectedMemory.id) {\n          state.categories[i].img = action.payload;\n        }\n      }\n    },\n    setIsCategoryNameModal(state, action) {\n      state.isCategoryNameModal = action.payload;\n    },\n    setIsMemoryCardModal(state, action) {\n      state.isMemoryCardModal = action.payload;\n    },\n    setSelectedSort(state, action) {\n      state.selectedSort = action.payload;\n    },\n    sortSelectedCategoryItems(state, action) {\n      if (action.payload === 'name') {\n        state.selectedMemories = state.selectedMemories.sort((a, b) => a['name'].localeCompare(b['name']));\n      }\n      if (action.payload === 'ratingDown') {\n        state.selectedMemories = state.selectedMemories.sort((a, b) => b['rating'] - a['rating']);\n      }\n      if (action.payload === 'ratingUp') {\n        state.selectedMemories = state.selectedMemories.sort((a, b) => a['rating'] - b['rating']);\n      }\n    }\n  }\n});\nexport default memorySlice.reducer;","map":{"version":3,"names":["createSlice","initialState","categories","selectedCategory","memories","selectedMemories","selectedMemory","options","name","value","selectedSort","isLoading","isCategoryNameModal","isMemoryCardModal","currentPage","totalCountMemories","memorySlice","reducers","setCategories","state","action","payload","addCategory","removeCategory","filter","category","id","setMemories","setSelectedMemories","addMemory","setSelectedMemory","setIsLoading","setSelectedCategory","setSelectedCategoryName","setCategoryName","i","length","title","setSelectedMemoryName","setSelectedMemoryDescription","description","setSelectedMemoryRating","rating","setSelectedMemoryImg","img","setIsCategoryNameModal","setIsMemoryCardModal","setSelectedSort","sortSelectedCategoryItems","sort","a","b","localeCompare","reducer"],"sources":["/Users/alexander/Desktop/myStudy/client/src/store/reducers/memory/MemorySlice.js"],"sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    categories: [],\n    selectedCategory: {},\n    memories: [],\n    selectedMemories: [],\n    selectedMemory: {},\n    options: [\n        {name: 'За назвою', value: 'name'},\n        {name: 'За спаданням', value: 'ratingDown'},\n        {name: 'За зростанням', value: 'ratingUp'},\n    ],\n    selectedSort: '',\n    isLoading: false,\n    isCategoryNameModal: false,\n    isMemoryCardModal: false,\n    currentPage: 1,\n    totalCountMemories: 0,\n}\nexport const memorySlice = createSlice({\n    name: 'memory',\n    initialState,\n    reducers: {\n        setCategories(state, action) {\n          state.categories = action.payload\n        },\n        addCategory(state, action) {\n            state.categories = [...state.categories, action.payload]\n        },\n        removeCategory(state, action) {\n            state.categories = state.categories.filter(category => category.id !== action.payload)\n            state.selectedCategory = {}\n        },\n\n\n        setMemories(state, action) {\n            state.memories = action.payload\n        },\n        setSelectedMemories(state, action) {\n            state.selectedMemories = action.payload\n        },\n        addMemory(state, action) {\n            state.selectedMemories = [...state.selectedMemories, action.payload]\n        },\n        setSelectedMemory(state, action) {\n            state.selectedMemory = action.payload\n        },\n\n        setIsLoading(state, action) {\n            state.isLoading = action.payload\n        },\n\n\n        setSelectedCategory(state, action) {\n            state.selectedCategory = action.payload\n        },\n\n\n        setSelectedCategoryName(state, action) {\n            state.selectedCategory.name = action.payload\n        },\n        setCategoryName(state, action) {\n            for (let i = 0; i < state.categories.length; i++) {\n                if (state.categories[i].id === state.selectedCategory.id) {\n                    state.categories[i].title = action.payload\n                }\n            }\n        },\n\n\n        setSelectedMemoryName(state, action) {\n            state.selectedMemory.title = action.payload\n            for(let i = 0; i < state.categories.length; i++ ) {\n                if (state.categories[i].id === state.selectedMemory.id) {\n                    state.categories[i].title = action.payload\n                }\n            }\n        },\n        setSelectedMemoryDescription(state, action) {\n            state.selectedMemories.description = action.payload\n            for(let i = 0; i < state.categories.length; i++ ) {\n                if (state.categories[i].id === state.selectedMemory.id) {\n                    state.categories[i].description = action.payload\n                }\n            }\n        },\n        setSelectedMemoryRating(state, action) {\n            state.selectedMemory.rating = action.payload\n            for(let i = 0; i < state.categories.length; i++ ) {\n                if (state.categories[i].id === state.selectedMemory.id) {\n                    state.categories[i].rating = action.payload\n                }\n            }\n        },\n        setSelectedMemoryImg(state, action) {\n            state.selectedMemory.img = action.payload\n            for (let i = 0; i < state.categories.length; i++){\n                if(state.categories[i].id === state.selectedMemory.id){\n                    state.categories[i].img = action.payload\n                }\n            }\n        },\n\n\n        setIsCategoryNameModal(state, action) {\n            state.isCategoryNameModal = action.payload\n        },\n        setIsMemoryCardModal(state, action) {\n            state.isMemoryCardModal = action.payload\n        },\n\n\n        setSelectedSort(state, action) {\n            state.selectedSort = action.payload\n        },\n        sortSelectedCategoryItems(state, action) {\n            if(action.payload === 'name'){\n                state.selectedMemories = state.selectedMemories.sort((a, b) => a['name'].localeCompare(b['name']))\n            }\n            if(action.payload === 'ratingDown'){\n                state.selectedMemories = state.selectedMemories.sort((a, b) => b['rating'] - a['rating'])\n            }\n            if(action.payload === 'ratingUp'){\n                state.selectedMemories = state.selectedMemories.sort((a, b) => a['rating'] - b['rating'])\n            }\n        }\n    }\n})\nexport default memorySlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}